
test_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000438  000004ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000438  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  000004d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000d4  00000000  00000000  00000516  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009dd  00000000  00000000  000005ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000364  00000000  00000000  00000fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000787  00000000  00000000  0000132b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000110  00000000  00000000  00001ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001fb  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002cb  00000000  00000000  00001dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000208a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000068 <copyRightChar>:
  68:	07 08 13 14 14 13 08 07 00 10 08 08 08 08 10 00     ................

00000078 <__c.1505>:
  78:	4c 69 6e 65 20 32 20 6c 6f 6e 67 65 72 20 74 68     Line 2 longer th
  88:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
	...

00000099 <__c.1503>:
  99:	4c 69 6e 65 20 31 20 6c 6f 6e 67 65 72 20 74 68     Line 1 longer th
  a9:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
  b9:	0a 00 00                                            ...

000000bc <__ctors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d8 e0       	ldi	r29, 0x08	; 8
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
  c8:	11 e0       	ldi	r17, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	e8 e3       	ldi	r30, 0x38	; 56
  d0:	f4 e0       	ldi	r31, 0x04	; 4
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <.do_copy_data_start>

000000d4 <.do_copy_data_loop>:
  d4:	05 90       	lpm	r0, Z+
  d6:	0d 92       	st	X+, r0

000000d8 <.do_copy_data_start>:
  d8:	aa 32       	cpi	r26, 0x2A	; 42
  da:	b1 07       	cpc	r27, r17
  dc:	d9 f7       	brne	.-10     	; 0xd4 <.do_copy_data_loop>
  de:	0e 94 82 00 	call	0x104	; 0x104 <main>
  e2:	0c 94 1a 02 	jmp	0x434	; 0x434 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <wait_until_key_pressed>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ea:	22 ee       	ldi	r18, 0xE2	; 226
  ec:	34 e0       	ldi	r19, 0x04	; 4
void wait_until_key_pressed(void)
{
    unsigned char temp1, temp2;
    
    do {
        temp1 = PIND;                  // read input
  ee:	99 b1       	in	r25, 0x09	; 9
  f0:	f9 01       	movw	r30, r18
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <wait_until_key_pressed+0x8>
        _delay_ms(5);                  // delay for key debounce
        temp2 = PIND;                  // read input
  f6:	89 b1       	in	r24, 0x09	; 9
        temp1 = (temp1 & temp2);       // debounce input
    } while ( temp1 & _BV(PIND7) );
  f8:	89 23       	and	r24, r25
  fa:	87 fd       	sbrc	r24, 7
  fc:	f8 cf       	rjmp	.-16     	; 0xee <wait_until_key_pressed+0x4>
    
    loop_until_bit_is_set(PIND,PIND7);            /* wait until key is released */
  fe:	4f 9b       	sbis	0x09, 7	; 9
 100:	fe cf       	rjmp	.-4      	; 0xfe <wait_until_key_pressed+0x14>
}
 102:	08 95       	ret

00000104 <main>:


int main(void)
{
 104:	ef 92       	push	r14
 106:	ff 92       	push	r15
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	df 93       	push	r29
 10e:	cf 93       	push	r28
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	27 97       	sbiw	r28, 0x07	; 7
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	f8 94       	cli
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	cd bf       	out	0x3d, r28	; 61
    char buffer[7];
    int  num=134;
    unsigned char i;
    
    
    DDRD &=~ (1 << PD7);        /* Pin PD2 input              */
 120:	57 98       	cbi	0x0a, 7	; 10
    PORTD |= (1 << PD7);        /* Pin PD2 pull-up enabled    */
 122:	5f 9a       	sbi	0x0b, 7	; 11


    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 124:	8c e0       	ldi	r24, 0x0C	; 12
 126:	0e 94 98 01 	call	0x330	; 0x330 <lcd_init>
         */
        
        lcd_clrscr();   /* clear display home cursor */
        
        /* convert interger into string */
        itoa( num , buffer, 10);
 12a:	7e 01       	movw	r14, r28
 12c:	08 94       	sec
 12e:	e1 1c       	adc	r14, r1
 130:	f1 1c       	adc	r15, r1
        /* 
         * Test 1:  write text to display
         */

        /* clear display and home cursor */
        lcd_clrscr();
 132:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_clrscr>
        
        /* put string to display (line 1) with linefeed */
        lcd_puts("LCD Test Line 1\n");
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_puts>

        /* cursor is now on second line, write second line */
        lcd_puts("Line 2");
 13e:	81 e1       	ldi	r24, 0x11	; 17
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_puts>
        
        /* move cursor to position 8 on line 2 */
        lcd_gotoxy(7,1);  
 146:	87 e0       	ldi	r24, 0x07	; 7
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_gotoxy>
        
        /* write single char to display */
        lcd_putc(':');
 14e:	8a e3       	ldi	r24, 0x3A	; 58
 150:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_putc>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 154:	0e 94 75 00 	call	0xea	; 0xea <wait_until_key_pressed>
        /*
         * Test 2: use lcd_command() to turn on cursor
         */
        
        /* turn on cursor */
        lcd_command(LCD_DISP_ON_CURSOR);
 158:	8e e0       	ldi	r24, 0x0E	; 14
 15a:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>

        /* put string */
        lcd_puts( "CurOn");
 15e:	88 e1       	ldi	r24, 0x18	; 24
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 166:	0e 94 75 00 	call	0xea	; 0xea <wait_until_key_pressed>

        /*
         * Test 3: display shift
         */
        
        lcd_clrscr();     /* clear display home cursor */
 16a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_clrscr>

        /* put string from program memory to display */
        lcd_puts_P( "Line 1 longer than 14 characters\n" );
 16e:	89 e9       	ldi	r24, 0x99	; 153
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_puts_p>
        lcd_puts_P( "Line 2 longer than 14 characters" );
 176:	88 e7       	ldi	r24, 0x78	; 120
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_puts_p>
        
        /* move BOTH lines one position to the left */
        lcd_command(LCD_MOVE_DISP_LEFT);
 17e:	88 e1       	ldi	r24, 0x18	; 24
 180:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 184:	0e 94 75 00 	call	0xea	; 0xea <wait_until_key_pressed>

        /* turn off cursor */
        lcd_command(LCD_DISP_ON);
 188:	8c e0       	ldi	r24, 0x0C	; 12
 18a:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
        
        /*
         *   Test: Display integer values
         */
        
        lcd_clrscr();   /* clear display home cursor */
 18e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_clrscr>
        
        /* convert interger into string */
        itoa( num , buffer, 10);
 192:	86 e8       	ldi	r24, 0x86	; 134
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	b7 01       	movw	r22, r14
 198:	4a e0       	ldi	r20, 0x0A	; 10
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <itoa>
        
        /* put converted string to display */
        lcd_puts(buffer);
 1a0:	c7 01       	movw	r24, r14
 1a2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 1a6:	0e 94 75 00 	call	0xea	; 0xea <wait_until_key_pressed>
        
        /*
         *  Test: Display userdefined characters
         */

       lcd_clrscr();   /* clear display home cursor */
 1aa:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_clrscr>
       
       lcd_puts("Copyright: ");
 1ae:	8e e1       	ldi	r24, 0x1E	; 30
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_puts>
       
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
 1b6:	80 e4       	ldi	r24, 0x40	; 64
 1b8:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
 1bc:	08 e6       	ldi	r16, 0x68	; 104
 1be:	10 e0       	ldi	r17, 0x00	; 0
       for(i=0; i<16; i++)
       {
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
 1c0:	f8 01       	movw	r30, r16
 1c2:	84 91       	lpm	r24, Z+
 1c4:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_data>
 1c8:	0f 5f       	subi	r16, 0xFF	; 255
 1ca:	1f 4f       	sbci	r17, 0xFF	; 255
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
       for(i=0; i<16; i++)
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	08 37       	cpi	r16, 0x78	; 120
 1d0:	1f 07       	cpc	r17, r31
 1d2:	b1 f7       	brne	.-20     	; 0x1c0 <main+0xbc>
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
       }
       
       /* move cursor to position 0 on line 2 */
       /* Note: this switched back to DD RAM adresses */
       lcd_gotoxy(0,1);
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_gotoxy>
       
       /* display user defined (c), built using two user defined chars */
       lcd_putc(0);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_putc>
       lcd_putc(1);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_putc>
       

       /* wait until push button PD2 (INT0) is pressed */
       wait_until_key_pressed();
 1e8:	0e 94 75 00 	call	0xea	; 0xea <wait_until_key_pressed>
 1ec:	a2 cf       	rjmp	.-188    	; 0x132 <main+0x2e>

000001ee <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 1ee:	38 2f       	mov	r19, r24
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
 1f0:	66 23       	and	r22, r22
 1f2:	11 f0       	breq	.+4      	; 0x1f8 <lcd_write+0xa>
       lcd_rs_high();
 1f4:	5c 9a       	sbi	0x0b, 4	; 11
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <lcd_write+0xc>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 1f8:	5c 98       	cbi	0x0b, 4	; 11
    }
    lcd_rw_low();    /* RW=0  write mode      */
 1fa:	5d 98       	cbi	0x0b, 5	; 11

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 1fc:	8a b1       	in	r24, 0x0a	; 10
 1fe:	8f 60       	ori	r24, 0x0F	; 15
 200:	8a b9       	out	0x0a, r24	; 10

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 202:	9b b1       	in	r25, 0x0b	; 11
 204:	90 7f       	andi	r25, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 206:	83 2f       	mov	r24, r19
 208:	82 95       	swap	r24
 20a:	8f 70       	andi	r24, 0x0F	; 15
 20c:	89 2b       	or	r24, r25
 20e:	8b b9       	out	0x0b, r24	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 210:	5e 9a       	sbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	28 2f       	mov	r18, r24
 216:	2a 95       	dec	r18
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_write+0x28>
    lcd_e_delay();
    lcd_e_low();
 21a:	5e 98       	cbi	0x0b, 6	; 11
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 21c:	3f 70       	andi	r19, 0x0F	; 15
 21e:	39 2b       	or	r19, r25
 220:	3b b9       	out	0x0b, r19	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 222:	5e 9a       	sbi	0x0b, 6	; 11
 224:	8a 95       	dec	r24
 226:	f1 f7       	brne	.-4      	; 0x224 <lcd_write+0x36>
    lcd_e_delay();
    lcd_e_low();
 228:	5e 98       	cbi	0x0b, 6	; 11
        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 22a:	9f 60       	ori	r25, 0x0F	; 15
 22c:	9b b9       	out	0x0b, r25	; 11
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 22e:	08 95       	ret

00000230 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 230:	88 23       	and	r24, r24
 232:	11 f0       	breq	.+4      	; 0x238 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 234:	5c 9a       	sbi	0x0b, 4	; 11
 236:	01 c0       	rjmp	.+2      	; 0x23a <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 238:	5c 98       	cbi	0x0b, 4	; 11
    lcd_rw_high();                           /* RW=1  read mode      */
 23a:	5d 9a       	sbi	0x0b, 5	; 11
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 23c:	8a b1       	in	r24, 0x0a	; 10
 23e:	80 7f       	andi	r24, 0xF0	; 240
 240:	8a b9       	out	0x0a, r24	; 10
        
        lcd_e_high();
 242:	5e 9a       	sbi	0x0b, 6	; 11
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	98 2f       	mov	r25, r24
 248:	9a 95       	dec	r25
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_read+0x18>
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 24c:	99 b1       	in	r25, 0x09	; 9
        lcd_e_low();
 24e:	5e 98       	cbi	0x0b, 6	; 11
 250:	28 2f       	mov	r18, r24
 252:	2a 95       	dec	r18
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_read+0x22>
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
 256:	5e 9a       	sbi	0x0b, 6	; 11
 258:	8a 95       	dec	r24
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_read+0x28>
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 25c:	89 b1       	in	r24, 0x09	; 9
 25e:	8f 70       	andi	r24, 0x0F	; 15
 260:	92 95       	swap	r25
 262:	90 7f       	andi	r25, 0xF0	; 240
        lcd_e_low();
 264:	5e 98       	cbi	0x0b, 6	; 11
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 266:	89 2b       	or	r24, r25
 268:	08 95       	ret

0000026a <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 18 01 	call	0x230	; 0x230 <lcd_read>
 270:	87 fd       	sbrc	r24, 7
 272:	fb cf       	rjmp	.-10     	; 0x26a <lcd_waitbusy>
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	8a 95       	dec	r24
 278:	f1 f7       	brne	.-4      	; 0x276 <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 18 01 	call	0x230	; 0x230 <lcd_read>
    
}/* lcd_waitbusy */
 280:	08 95       	ret

00000282 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 282:	1f 93       	push	r17
 284:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 286:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_waitbusy>
    lcd_write(cmd,0);
 28a:	81 2f       	mov	r24, r17
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write>
}
 292:	1f 91       	pop	r17
 294:	08 95       	ret

00000296 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 296:	1f 93       	push	r17
 298:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 29a:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_waitbusy>
    lcd_write(data,1);
 29e:	81 2f       	mov	r24, r17
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write>
}
 2a6:	1f 91       	pop	r17
 2a8:	08 95       	ret

000002aa <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 2aa:	66 23       	and	r22, r22
 2ac:	11 f4       	brne	.+4      	; 0x2b2 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 2ae:	80 58       	subi	r24, 0x80	; 128
 2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 2b2:	80 54       	subi	r24, 0x40	; 64
 2b4:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
 2b8:	08 95       	ret

000002ba <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 2ba:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_waitbusy>
}
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	08 95       	ret

000002c2 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
}
 2c8:	08 95       	ret

000002ca <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
}
 2d0:	08 95       	ret

000002d2 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 2d2:	1f 93       	push	r17
 2d4:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 2d6:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_waitbusy>
    if (c=='\n')
 2da:	1a 30       	cpi	r17, 0x0A	; 10
 2dc:	49 f4       	brne	.+18     	; 0x2f0 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 2de:	80 34       	cpi	r24, 0x40	; 64
 2e0:	10 f0       	brcs	.+4      	; 0x2e6 <lcd_putc+0x14>
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <lcd_putc+0x16>
 2e6:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 2e8:	80 58       	subi	r24, 0x80	; 128
 2ea:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
 2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 2f0:	81 2f       	mov	r24, r17
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write>
    }

}/* lcd_putc */
 2f8:	1f 91       	pop	r17
 2fa:	08 95       	ret

000002fc <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	ec 01       	movw	r28, r24
 302:	02 c0       	rjmp	.+4      	; 0x308 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 304:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 308:	89 91       	ld	r24, Y+
 30a:	88 23       	and	r24, r24
 30c:	d9 f7       	brne	.-10     	; 0x304 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	ec 01       	movw	r28, r24
 31a:	02 c0       	rjmp	.+4      	; 0x320 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 31c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_putc>
 320:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 322:	21 96       	adiw	r28, 0x01	; 1
 324:	84 91       	lpm	r24, Z+
 326:	88 23       	and	r24, r24
 328:	c9 f7       	brne	.-14     	; 0x31c <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 330:	1f 93       	push	r17
 332:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 334:	8a b1       	in	r24, 0x0a	; 10
 336:	8f 67       	ori	r24, 0x7F	; 127
 338:	8a b9       	out	0x0a, r24	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 33a:	80 ea       	ldi	r24, 0xA0	; 160
 33c:	9f e0       	ldi	r25, 0x0F	; 15
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <lcd_init+0xe>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 342:	59 9a       	sbi	0x0b, 1	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 344:	58 9a       	sbi	0x0b, 0	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 346:	5e 9a       	sbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	89 2f       	mov	r24, r25
 34c:	8a 95       	dec	r24
 34e:	f1 f7       	brne	.-4      	; 0x34c <lcd_init+0x1c>
    lcd_e_delay();
    lcd_e_low();
 350:	5e 98       	cbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 352:	e2 ee       	ldi	r30, 0xE2	; 226
 354:	f4 e0       	ldi	r31, 0x04	; 4
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <lcd_init+0x26>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 35a:	5e 9a       	sbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 35c:	89 2f       	mov	r24, r25
 35e:	8a 95       	dec	r24
 360:	f1 f7       	brne	.-4      	; 0x35e <lcd_init+0x2e>
    lcd_e_delay();
    lcd_e_low();
 362:	5e 98       	cbi	0x0b, 6	; 11
 364:	85 e1       	ldi	r24, 0x15	; 21
 366:	28 2f       	mov	r18, r24
 368:	2a 95       	dec	r18
 36a:	f1 f7       	brne	.-4      	; 0x368 <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 36c:	5e 9a       	sbi	0x0b, 6	; 11
 36e:	29 2f       	mov	r18, r25
 370:	2a 95       	dec	r18
 372:	f1 f7       	brne	.-4      	; 0x370 <lcd_init+0x40>
    lcd_e_delay();
    lcd_e_low();
 374:	5e 98       	cbi	0x0b, 6	; 11
 376:	28 2f       	mov	r18, r24
 378:	2a 95       	dec	r18
 37a:	f1 f7       	brne	.-4      	; 0x378 <lcd_init+0x48>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 37c:	58 98       	cbi	0x0b, 0	; 11

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 37e:	5e 9a       	sbi	0x0b, 6	; 11
 380:	9a 95       	dec	r25
 382:	f1 f7       	brne	.-4      	; 0x380 <lcd_init+0x50>
    lcd_e_delay();
    lcd_e_low();
 384:	5e 98       	cbi	0x0b, 6	; 11
 386:	8a 95       	dec	r24
 388:	f1 f7       	brne	.-4      	; 0x386 <lcd_init+0x56>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 38a:	88 e2       	ldi	r24, 0x28	; 40
 38c:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 390:	88 e0       	ldi	r24, 0x08	; 8
 392:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 396:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 39a:	86 e0       	ldi	r24, 0x06	; 6
 39c:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 3a0:	81 2f       	mov	r24, r17
 3a2:	0e 94 41 01 	call	0x282	; 0x282 <lcd_command>

}/* lcd_init */
 3a6:	1f 91       	pop	r17
 3a8:	08 95       	ret

000003aa <itoa>:
 3aa:	fb 01       	movw	r30, r22
 3ac:	9f 01       	movw	r18, r30
 3ae:	e8 94       	clt
 3b0:	42 30       	cpi	r20, 0x02	; 2
 3b2:	c4 f0       	brlt	.+48     	; 0x3e4 <itoa+0x3a>
 3b4:	45 32       	cpi	r20, 0x25	; 37
 3b6:	b4 f4       	brge	.+44     	; 0x3e4 <itoa+0x3a>
 3b8:	4a 30       	cpi	r20, 0x0A	; 10
 3ba:	29 f4       	brne	.+10     	; 0x3c6 <itoa+0x1c>
 3bc:	97 fb       	bst	r25, 7
 3be:	1e f4       	brtc	.+6      	; 0x3c6 <itoa+0x1c>
 3c0:	90 95       	com	r25
 3c2:	81 95       	neg	r24
 3c4:	9f 4f       	sbci	r25, 0xFF	; 255
 3c6:	64 2f       	mov	r22, r20
 3c8:	77 27       	eor	r23, r23
 3ca:	0e 94 06 02 	call	0x40c	; 0x40c <__udivmodhi4>
 3ce:	80 5d       	subi	r24, 0xD0	; 208
 3d0:	8a 33       	cpi	r24, 0x3A	; 58
 3d2:	0c f0       	brlt	.+2      	; 0x3d6 <itoa+0x2c>
 3d4:	89 5d       	subi	r24, 0xD9	; 217
 3d6:	81 93       	st	Z+, r24
 3d8:	cb 01       	movw	r24, r22
 3da:	00 97       	sbiw	r24, 0x00	; 0
 3dc:	a1 f7       	brne	.-24     	; 0x3c6 <itoa+0x1c>
 3de:	16 f4       	brtc	.+4      	; 0x3e4 <itoa+0x3a>
 3e0:	5d e2       	ldi	r21, 0x2D	; 45
 3e2:	51 93       	st	Z+, r21
 3e4:	10 82       	st	Z, r1
 3e6:	c9 01       	movw	r24, r18
 3e8:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <strrev>

000003ec <strrev>:
 3ec:	dc 01       	movw	r26, r24
 3ee:	fc 01       	movw	r30, r24
 3f0:	67 2f       	mov	r22, r23
 3f2:	71 91       	ld	r23, Z+
 3f4:	77 23       	and	r23, r23
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <strrev+0x4>
 3f8:	32 97       	sbiw	r30, 0x02	; 2
 3fa:	04 c0       	rjmp	.+8      	; 0x404 <strrev+0x18>
 3fc:	7c 91       	ld	r23, X
 3fe:	6d 93       	st	X+, r22
 400:	70 83       	st	Z, r23
 402:	62 91       	ld	r22, -Z
 404:	ae 17       	cp	r26, r30
 406:	bf 07       	cpc	r27, r31
 408:	c8 f3       	brcs	.-14     	; 0x3fc <strrev+0x10>
 40a:	08 95       	ret

0000040c <__udivmodhi4>:
 40c:	aa 1b       	sub	r26, r26
 40e:	bb 1b       	sub	r27, r27
 410:	51 e1       	ldi	r21, 0x11	; 17
 412:	07 c0       	rjmp	.+14     	; 0x422 <__udivmodhi4_ep>

00000414 <__udivmodhi4_loop>:
 414:	aa 1f       	adc	r26, r26
 416:	bb 1f       	adc	r27, r27
 418:	a6 17       	cp	r26, r22
 41a:	b7 07       	cpc	r27, r23
 41c:	10 f0       	brcs	.+4      	; 0x422 <__udivmodhi4_ep>
 41e:	a6 1b       	sub	r26, r22
 420:	b7 0b       	sbc	r27, r23

00000422 <__udivmodhi4_ep>:
 422:	88 1f       	adc	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	5a 95       	dec	r21
 428:	a9 f7       	brne	.-22     	; 0x414 <__udivmodhi4_loop>
 42a:	80 95       	com	r24
 42c:	90 95       	com	r25
 42e:	bc 01       	movw	r22, r24
 430:	cd 01       	movw	r24, r26
 432:	08 95       	ret

00000434 <_exit>:
 434:	f8 94       	cli

00000436 <__stop_program>:
 436:	ff cf       	rjmp	.-2      	; 0x436 <__stop_program>
